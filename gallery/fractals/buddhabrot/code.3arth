const iterations = 80000;

const B = 2000;
const G = 20000;
// else R

const BlueWeight = 3.1;
const GreenWeight = 1.5;
const RedWeight = 1;

iterate() {
  let d = draw();
  return z => {
    z = {
      ...z,
      red: 0,
      green: 0,
      blue: 0
    };
    if(z.iterations < B) {
      z.blue = 1;
      z.green = 1;
      z.red = 1;
    }
    else if(z.iterations < G) {
      z.green = 1;
      z.red = 1;
    }
    else {
      z.red = 1;
    }
    //if(z.iteration == 1){
      d(z);
    //}
    return {
      ...z,
      re: z.re * z.re - z.im * z.im + z.cre,
      im: 2 * z.re * z.im + z.cim,
      iteration: z.iteration + 1
    }
  }
}

findEscaping() {
  const roots = [
    [-1, 0, 0.25],
    [-0.12472, 0.74402, 0.0943],
    [-1.30905, 0, 0.05895],
    [0.281, 0.53113, 0.04387],
    [-0.5045, 0.56302, 0.0387],
    [-1.1382, 0.2395, 0.02645],
    [0.3793, 0.336, 0.0236],
    [-0.1135, 0.8602, 0.0221],
    [-0.622555, 0.42545, 0.020747],
    [0.12126, 0.611015, 0.016725],
    [-0.35945, 0.617699, 0.015305],
    [-1.00, 0.26515, 0.01512],
    [0.389115, 0.2165, 0.0141],
    [-1.38108, 0, 0.01295],
    [-0.6725, 0.3382, 0.0128],

    [-1.7593, 0, 0.0092],
    [-0.1583, 1.0332, 0.0041]
  ];

  const L = roots.length - 1;

  return z => {
    if(z.hasOwnProperty('iteration') && z.iteration < z.iterations){
      return z;
    }
    while(true) {
      let a = Math.random() * Math.PI * 2,
      tr = Math.sqrt(Math.random());

      let X = Math.cos(a) * tr * 2;
      let Y = Math.sin(a) * tr * 2;

      let theta = Math.atan2(Y, (X - 0.25));
      let r = Math.sqrt((X - 0.25) * (X - 0.25) + Y * Y) * 2;
      if(r > 1 - Math.cos(theta) && (X + 1) * (X + 1) + Y * Y > 0.0625) {
        let j;

        for(j = L; j >= 0; j--) {
          let xm = X - roots[j][0];
          let ym = Y - roots[j][1];
          let ymb = Y + roots[j][1];
          let di = roots[j][2] * roots[j][2];
          if(xm * xm + ym * ym < di || xm * xm + ymb * ymb < di) {
            j = -2;
          }
        }

        if(j === -1) {
          let it = 0;
          for(let Z = [0, 0]; it < iterations && Z[0] * Z[0] + Z[1] * Z[1] <= 4; it++) {
            Z = [Z[0] * Z[0] - Z[1] * Z[1] + X, Z[0] * Z[1] * 2 + Y];
          }
          if(it < iterations) {
            return {
              ...z,
              re: X,
              im: Y,
              cre: X,
              cim: Y,
              iteration: 1,
              iterations: it
            }
          }
        }
      }
    }
  }
}

body:
xaos{
  1:e:[1]:
    findEscaping()
    -> iterate();
};

camera:
scale(1/4)
-> rotate(-90);

shader:
sumColor{
  1: normalizeColors();
}
-> sumColor{
  RedWeight: productColor{
    1: identity();
    1: color(colorRGB(1, 0, 0));
  };
  GreenWeight: productColor{
    1: identity();
    1: color(colorRGB(0, 1, 0));
  };
  BlueWeight: productColor{
    1: identity();
    1: color(colorRGB(0, 0, 1));
  };
}
-> gamma(1.3)
-> dither(5);
