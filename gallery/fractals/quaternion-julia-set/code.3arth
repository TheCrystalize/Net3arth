// https://en.wikipedia.org/wiki/Julia_set

buffer() {
  return zBuffer();
}

juliaSet(number jr, number ji, number jj, number jk, number its) {
  return z => {
    let isIn = false;
    let _zr, _zi, _zj;
    theLoop:
      while(!isIn) {
        let cr = jr,
          ci = ji,
          cj = jj,
          ck = jk;
        _zr = Math.random() * 4 - 2;
        _zi = Math.random() * 4 - 2;
        _zj = Math.random() * 4 - 2;
        let zr = _zr,
          zi = _zi,
          zj = _zj,
          zk = 0;
        for(let it = 0; it < its; it++) {
          let temp = zr;
          zr = zr * zr - zi * zi - zj * zj - zk * zk + cr;
          zi = 2 * temp * zi + ci;
          zj = 2 * temp * zj + cj;
          zk = 2 * temp * zk + ck;
          if(zr * zr + zi * zi + zj * zj + zk * zk > 4) {
            continue theLoop;
          }
        }
        isIn = true;
      }

    return {
      ...z,
      re: _zr,
      im: _zi,
      z: _zj,
      green: 0.5 - _zj / 5,
      blue: 0.5 + _zj / 5
    };
  }
}

body:
juliaSet(-0.5,-0.6,0,0,20);

camera:
scale3D(2/5)
-> rotate3D(15, 0, 0)
-> rotate3D(0, 15, 0)
-> translate3D(0, 0, 1)
-> scale(1.25);

shader:
basicEnvironmentOrth(-30, -15, 2, 0)
-> sumColor{
  0.1: scale(1);
  0.9: productColor{
    1: sumColor{
      1: scale(1);
      1: specularOrth(-30, -15, 2.5, 0, 20);
    };
    1: sumColor{
      0.5: ambientOcclusionBig(20, 2, -0.05);
      0.5: ambientOcclusionBig(20, 2, 0);
      -0.5: ambientOcclusionBig(20, 2, 0.05);
    };
  };
};
