buffer() {
  return averageBuffer();
}

const iterations = 500;

mandelbrot() {
  let Z, a, b;
  return z => {
    Z = [z.re, z.im];
    for(let i = 0; i < iterations; i++) {
      let a = Z[0] * Z[0],
        b = Z[1] * Z[1];
      if(a + b > 4) {
        return {
          ...z,
          red: i / iterations,
          green: 0,
          blue: 0
        };
      }
      Z = [
        a - b + z.re,
        2 * Z[0] * Z[1] + z.im
      ];
    }
    return {
      ...z,
      red: 1,
      green: 1,
      blue: 0
    };
  };
}

colorGradient() {
  const colors = [
    colorRGB(  9 / 255,   1 / 255,  47 / 255),
    colorRGB(  4 / 255,   4 / 255,  73 / 255),
    colorRGB(  0 / 255,   7 / 255, 100 / 255),
    colorRGB( 12 / 255,  44 / 255, 138 / 255),
    colorRGB( 24 / 255,  82 / 255, 177 / 255),
    colorRGB( 57 / 255, 125 / 255, 209 / 255),
    colorRGB(134 / 255, 181 / 255, 229 / 255),
    colorRGB(211 / 255, 236 / 255, 248 / 255),
    colorRGB(241 / 255, 233 / 255, 191 / 255),
    colorRGB(248 / 255, 201 / 255,  95 / 255),
    colorRGB(255 / 255, 170 / 255,   0 / 255),
    colorRGB(204 / 255, 128 / 255,   0 / 255),
    colorRGB(153 / 255,  87 / 255,   0 / 255),
    colorRGB(106 / 255,  52 / 255,   3 / 255),
    colorRGB( 66 / 255,  30 / 255,  15 / 255),
    colorRGB( 25 / 255,   7 / 255,  26 / 255),
  ];
  return z => {
    let c = Math.pow(z.red, 0.75) * 40;
    if(c === 1) {
      c = 0;
    }
    let col = (c % colors.length) >> 0;
    return {
      ...z,
      ...lerp(
        lerp(
          colors[col],
          colors[(col + 1) % colors.length],
          c % 1
        ),
        colorRGB(0, 0, 0), z.green),
      alpha: 255
    };
  };
}

body:
blurSquare()
-> scale(4)
-> mandelbrot();

camera:
scale(1 / 4);

shader:
colorGradient();
