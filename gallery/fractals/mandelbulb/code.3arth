buffer() {
  return zBuffer();
}

mandelbulb(number n, number its) {
  let cr, ci, cj, zr, zi, zj, r, rn, phi, theta, it, isIn;
  return z => {
    isIn = false;
    theLoop:
    while(!isIn) {
      cr = Math.random() * 4 - 2;
      ci = Math.random() * 4 - 2;
      cj = Math.random() * 4 - 2;
      zr = cr;
      zi = ci;
      zj = cj;

      r = Math.sqrt(zr * zr + zi * zi + zj * zj);

      for(it = 0; it < its; it++) {
        rn = Math.pow(r, n);
        phi = Math.atan(zi / zr);
        theta = Math.acos(zj / r);

        zr = rn * Math.sin(n * theta) * Math.cos(n * phi) + cr;
        zi = rn * Math.sin(n * theta) * Math.sin(n * phi) + ci;
        zj = rn * Math.cos(n * theta) + cj;

        r = Math.sqrt(zr * zr + zi * zi + zj * zj);

        if(r > 4) {
          continue theLoop;
        }
      }
      isIn = true;
    }

    return {
      ...z,
      re: cr,
      im: ci,
      z: cj,
      ...hslToRgb(0.8 - r / 4, 1, 0.75)
    };
  }
}

body:
mandelbulb(8, 40);

camera:
scale3D(0.44)
-> rotate3D(90, 0, 0)
-> rotate3D(0, 0, -90)
-> rotate3D(0, 45, 0);

shader:
sumColor{
  1: productColor{
    1: basicEnvironmentOrth(30, 30, 1, 0)
    -> sumColor{
      1: scale(1);
      1: productColor{
        1: scale(1);
        1: specularOrth(30, 30, 1.4, 1, 2);
      };
    };
    1: sumColor{
      0.5: ambientOcclusion(20);
      0.5: ambientOcclusion(5);
    };
  };
};
